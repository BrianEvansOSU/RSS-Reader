import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @Brian Evans
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     *
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page
     * title</title> </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table>
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<html>");
        out.println("<head>");

        int title = getChildElement(channel, "title");
        if (channel.child(title).numberOfChildren() > 0
                && !channel.child(title).label().isEmpty()) {
            out.println("<title>" + channel.child(title).child(0) + "</title>");
            //Prints the title HTML code

        } else {
            out.println("<title> Empty Title </title>");
            //If there is Empty Title node, this prints Empty Title in HTML
        }
        out.println("</head>");
        out.println("<body>");

        int link = getChildElement(channel, "link");
        if (channel.child(title).numberOfChildren() > 0
                && !channel.child(title).label().isEmpty()) {
            if (channel.child(link).numberOfChildren() > 0) {
                out.println(" <h1> <a href=" + channel.child(link).child(0)
                        + ">" + channel.child(title).child(0) + "</a></h1>");
                //Prints the title with a link to the source

            } else if (channel.child(title).numberOfChildren() > 0) {
                out.println(" <h1>" + channel.child(title).child(0) + "</h1>");
                //If there is no link this prints the title with no link
            }
        } else {
            if (channel.child(link).numberOfChildren() > 0
                    && channel.child(title).numberOfChildren() > 0) {
                out.println(" <h1> <a href=" + channel.child(link).child(0)
                        + ">Empty Title</a></h1>");
                //If there is Empty Title, this prints "Empty Title" with a link

            } else if (channel.child(title).numberOfChildren() > 0) {
                out.println(" <h1>Empty Title</h1>");
                //If there is no link or title this prints "Empty Title" with no link
            }
        }

        out.println(" <p>");
        int description = getChildElement(channel, "description");
        if (channel.child(description).numberOfChildren() > 0) {
            out.println(channel.child(description).child(0));
            //prints the description in a paragraph
        } else {
            out.println("No description");
            //prints no description if there is no description
        }
        out.println(" </p>");
        out.println(" <table border= \"1\">");
        out.println(" <tr>");
        out.println("  <th> Date </th>");
        out.println("  <th> Source </th>");
        out.println("  <th> News </th>"); //Prints the title rows for the table
        out.println(" </tr>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table>");
        out.println("</body>");
        out.println("</html>"); //outputs the closing tags
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures
     *
     *          <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     *          </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";
        int elLoc = -1;
        for (int i = xml.numberOfChildren() - 1; i >= 0; i--) {
            //for loop sorting through the children of the XML
            if (xml.child(i).label().equals(tag)) {
                elLoc = i;
                //returns the location of the first location of the tagv
            }
        }
        return elLoc;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires
     *
     *           <pre>
     * [the label of the root of item is an <item> tag] and out.is_open
     *           </pre>
     *
     * @ensures
     *
     *          <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     *          </pre>
     */

    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        int pubDate = getChildElement(item, "pubDate");
        int source = getChildElement(item, "source");
        int title = getChildElement(item, "title");
        int description = getChildElement(item, "description");
        int link = getChildElement(item, "link");
        //uses getChildElement to find the index of pubDate, source, title, and link

        out.println("<tr>");
        if (pubDate >= 0 && item.child(pubDate).numberOfChildren() > 0) {
            out.println(" <th>" + item.child(pubDate).child(0) + "</th>");
        } else {
            out.println(" <th>No date available</th>");
            //Enters the pubDate into column 1, "No date available" if there is no date
        }

        if (source >= 0 && item.child(source).numberOfChildren() > 0) {
            out.println(
                    " <th> <a href=" + item.child(source).attributeValue("url")
                            + ">" + item.child(source).child(0) + "</a></th>");
        } else {
            out.println("<th>No source available</th>");
            //enters source into column 2 with a link to the source,
            //"No source available" if there is no source
        }

        if (title >= 0 && item.child(title).numberOfChildren() > 0
                && !item.child(title).child(0).label().isEmpty()) {
            if (link >= 0 && item.child(link).numberOfChildren() > 0) {
                out.println(" <th> <a href=" + item.child(link).child(0) + ">"
                        + item.child(title).child(0) + "</a></th>");
            } else {
                out.println(" <th>" + item.child(title).child(0) + "</th>");
            }
        } else if (description >= 0
                && item.child(description).numberOfChildren() > 0) {
            if (link >= 0 && item.child(link).numberOfChildren() > 0) {
                out.println(" <th> <a href=" + item.child(link).child(0) + ">"
                        + item.child(description).child(0) + "</a></th>");
            } else {
                out.println(
                        " <th>" + item.child(description).child(0) + "</th>");
            }
        } else {
            out.println("<th>No title available</th>");
        }
        //Enters title of the article into column 2 with link to the article,
        //Description if there is no title, "No title available" if there isn't either

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Please enter an URL for a RSS 2.0 feed");
        String url = in.nextLine(); //sets url equal to RSS 2.0 user entered url
        XMLTree xml = new XMLTree1(url);
        while (!xml.label().equals("rss") || !xml.hasAttribute("version")
        //loop that asks the user for a valid URL until it is RSS 2.0
                || !xml.attributeValue("version").equals("2.0")) {
            out.println(
                    "Incorrect URL, please enter an URL for a RSS 2.0 feed");
            url = in.nextLine();
            xml = new XMLTree1(url);
        }

        out.println("Please enter the name of an output file");
        String output = in.nextLine();
        //sets output equal to desired output file name entered by user

        SimpleWriter htmlOut = new SimpleWriter1L(output);
        //creates a writer to print to the user entered file

        XMLTree channel = xml.child(getChildElement(xml, "channel"));
        //creates a new XMLtree for channel
        outputHeader(channel, htmlOut); //prints the header for the given channel

        for (int i = 0; i < channel.numberOfChildren(); i++) {
            if (channel.child(i).label().equals("item")) {
                processItem(channel.child(i), htmlOut);
                //prints a table for the date, source, and title
            }
        }
        outputFooter(htmlOut); //closes the header tags

        in.close(); //closing tags
        out.close();
        htmlOut.close();
    }
}